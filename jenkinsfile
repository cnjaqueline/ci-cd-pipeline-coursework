pipeline {
    agent any

    environment {
        APP_NAME = 'express-calculator'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch para build')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Executar testes?')
    }

    triggers {
        cron('H 2 * * 1-5') // Executa de segunda a sexta às 2h da manhã
    }
    
    stages {
        // stage('Input') {
        //     steps {
        //         script {
        //             def userInput = input(message: 'Continuar com o deploy?', parameters: [booleanParam(defaultValue: true, description: 'Prosseguir?', name: 'PROCEED')])
        //             if (!userInput) {
        //                 error("Deploy cancelado pelo usuário.")
        //             }
        //         }
        //     }
        // }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        
        stage('Parallel Stages') {
            parallel {
                stage('Document Building') {
                    steps {
                        sh 'cd src && make prod'
                        sh 'rm -rf /src/jenkins'
                        sh 'mv src/build/html /src/jenkins'
                    }
                }
                stage('Report Testing') {
                    steps {
                        echo "Relatório gerado para ${APP_NAME}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'npm run deploy'
            }
        }

        stage('Matrix Build') {
            matrix {
                axes {
                    axis {
                        name 'NODE_VERSION'
                        values '14', '16', '18'
                    }
                }
                stages {
                    stage('Test on NodeJS') {
                        steps {
                            // sh 'nvm use $NODE_VERSION'
                            // sh 'npm test'
                            echo "Do Test for ${NODE_VERSION}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado.'
        }
        success {
            echo 'Pipeline concluído com sucesso!'
        }
        failure {
            echo 'Pipeline falhou.'
        }
    }
}
